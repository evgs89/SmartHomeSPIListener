#define d_struct

/*------------------------------------
 * Название сети  |  Помещение       |
 * ---------------|------------------|
 *                |      5           |
 *                |      6           |
 *   Сеть №1     |      7           |
 *                |      8           |
 *                |    Гараж         |
 *----------------|------------------|                    
 *                |      2           |       
 *                |      3           |
 *   Сеть №2     |      13          |
 *                |      17 (баасейн)|
 *----------------|------------------|                      
 *                |      9           |
 *                |      10          |
 *                |      11          |
 *    Сеть №3    |      12          |
 *                |      14          |
 *                |      15          |
 *                |      16          |
 *----------------|-------------------                      
 */



/*===================================================**
 **                Объявление структур                **
 **===================================================**/

struct  st_RZH_Rab {                    // Режим работы системы
  bool  Rzh1    : 1;                    // Авария           Alarm           
  bool  Rzh2    : 1;                    // Зима             Winter          
  bool  Rzh3    : 1;                    // Ночь             Night         
  bool  Rzh4    : 1;                    // Темно            Dark         
  bool  Rzh5    : 1;                    // Отопление        Heating            
  bool  Rzh6    : 1;                    // Охлаждение       Cooling           
  bool  Rzh7    : 1;                    // Отпуск           Holiday       
  bool  Rzh8    : 1;                    // Повседневный     Daily1             
  bool  Rzh9    : 1;                    // Повседневный2    Daily2         
  bool  Rzh10   : 1;                    // Эконом           Saving  
  bool  Rzh11   : 1;                    // Праздник         Fiesta    
  bool  Rzh12   : 1;                    // Вне дома         Outside    
  bool  Rzh13   : 1;                    // Дизель           Diesel  
  bool  Rzh14   : 1;                    // Откл свет        LightsOFF                 
};

struct  st_FlagSV_MB {                  // Флаг включения обмена с котроллером по ModBas
  bool  fSVGar        : 1;              // Контроллер гаража (К1)
  bool  fSV_KPWM7     : 1;              // Контроллер KPWM7
  bool  fSV_K16       : 1;              // Контроллер кухни (К16)
  bool  fSV_KPWM2     : 1;              // Контроллер KPWM2
  bool  fSV_KPWM16    : 1;              // Контроллер KPWM16
  bool  fSV_KPWM14    : 1;              // Контроллер KPWM14
  bool  fSV_KUP16     : 1;              // Контроллер КУП16
  bool  fSV_K17       : 1;              // Плата контроллера сауны
  bool  fSV_K0        : 1;              // Контроллер погоды
  bool  fSV_K19       : 1;              // Контроллер зоны барбекю
  bool  fSV_KUP2      : 1;              // Контроллер КУП2
  bool  fSV_KUP3      : 1;              // Контроллер КУП3
  bool  fSV_KUP5      : 1;              // Контроллер КУП5
  bool  fSV_KUP9      : 1;              // Контроллер КУП9
  bool  fSV_KUP10     : 1;              // Контроллер КУП10
  bool  fSV_KUP11     : 1;              // Контроллер КУП11
  bool  fSV_KUP12     : 1;              // Контроллер КУП12
  bool  fSV_KUP14     : 1;              // Контроллер КУП14
};

struct  st_SV_MB {                      // Регистрация обмена с котроллером по ModBas
  bool  SVGar         : 1;              // Контроллер гаража (К1)
  bool  SV_KPWM7      : 1;              // Контроллер KPWM7
  bool  SV_K16        : 1;              // Контроллер кухни (К16)
  bool  SV_KPWM2      : 1;              // Контроллер KPWM2
  bool  SV_KPWM16     : 1;              // Контроллер KPWM16
  bool  SV_KPWM14     : 1;              // Контроллер KPWM14
  bool  SV_KUP16      : 1;              // Контроллер КУП16
  bool  SV_K17        : 1;              // Плата контроллера сауны
  bool  SV_K0         : 1;              // Контроллер погоды
  bool  SV_K19        : 1;              // Контроллер зоны барбекю
  bool  SV_KUP2       : 1;              // Контроллер КУП2
  bool  SV_KUP3       : 1;              // Контроллер КУП3
  bool  SV_KUP5       : 1;              // Контроллер КУП5
  bool  SV_KUP9       : 1;              // Контроллер КУП9
  bool  SV_KUP10      : 1;              // Контроллер КУП10
  bool  SV_KUP11      : 1;              // Контроллер КУП11
  bool  SV_KUP12      : 1;              // Контроллер КУП12
  bool  SV_KUP14      : 1;              // Контроллер КУП14
};

struct  st_SvetUlicy {                  // Флаги задействования группы в сценариях
  bool  SC1Gr1On      : 1;              // задействовать выключение по времени
  bool  SC1Gr1Off     : 1;              // задействовать включение по времени
  bool  SC1Gr1OnD     : 1;              // задействовать включение по датчику света
  bool  SC1Gr1OffD    : 1;              // задействовать выключение по датчику света
  bool  SC1Gr2On      : 1;              // задействовать выключение по времени
  bool  SC1Gr2Off     : 1;              // задействовать включение по времени
  bool  SC1Gr2OnD     : 1;              // задействовать включение по датчику света
  bool  SC1Gr2OffD    : 1;              // задействовать выключение по датчику света
  bool  SC1Gr3On      : 1;              // задействовать выключение по времени
  bool  SC1Gr3Off     : 1;              // задействовать включение по времени
  bool  SC1Gr3OnD     : 1;              // задействовать включение по датчику света
  bool  SC1Gr3OffD    : 1;              // задействовать выключение по датчику света
  bool  SC1Gr4On      : 1;              // задействовать выключение по времени
  bool  SC1Gr4Off     : 1;              // задействовать включение по времени
  bool  SC1Gr4OnD     : 1;              // задействовать включение по датчику света
  bool  SC1Gr4OffD    : 1;              // задействовать выключение по датчику света
  bool  SC1Gr5On      : 1;              // задействовать выключение по времени
  bool  SC1Gr5Off     : 1;              // задействовать включение по времени
  bool  SC1Gr5OnD     : 1;              // задействовать включение по датчику света
  bool  SC1Gr5OffD    : 1;              // задействовать выключение по датчику света
  bool  SC2Gr1On      : 1;              // задействовать выключение по времени
  bool  SC2Gr1Off     : 1;              // задействовать включение по времени
  bool  SC2Gr1OnD     : 1;              // задействовать включение по датчику света
  bool  SC2Gr1OffD    : 1;              // задействовать выключение по датчику света
  bool  SC2Gr2On      : 1;              // задействовать выключение по времени
  bool  SC2Gr2Off     : 1;              // задействовать включение по времени
  bool  SC2Gr2OnD     : 1;              // задействовать включение по датчику света
  bool  SC2Gr2OffD    : 1;              // задействовать выключение по датчику света
  bool  SC2Gr3On      : 1;              // задействовать выключение по времени
  bool  SC2Gr3Off     : 1;              // задействовать включение по времени
  bool  SC2Gr3OnD     : 1;              // задействовать включение по датчику света
  bool  SC2Gr3OffD    : 1;              // задействовать выключение по датчику света
  bool  SC2Gr4On      : 1;              // задействовать выключение по времени
  bool  SC2Gr4Off     : 1;              // задействовать включение по времени
  bool  SC2Gr4OnD     : 1;              // задействовать включение по датчику света
  bool  SC2Gr4OffD    : 1;              // задействовать выключение по датчику света
  bool  SC2Gr5On      : 1;              // задействовать выключение по времени
  bool  SC2Gr5Off     : 1;              // задействовать включение по времени
  bool  SC2Gr5OnD     : 1;              // задействовать включение по датчику света
  bool  SC2Gr5OffD    : 1;              // задействовать выключение по датчику света
  bool  SC3Gr1On      : 1;              // задействовать выключение по времени
  bool  SC3Gr1Off     : 1;              // задействовать включение по времени
  bool  SC3Gr1OnD     : 1;              // задействовать включение по датчику света
  bool  SC3Gr1OffD    : 1;              // задействовать выключение по датчику света
  bool  SC3Gr2On      : 1;              // задействовать выключение по времени
  bool  SC3Gr2Off     : 1;              // задействовать включение по времени
  bool  SC3Gr2OnD     : 1;              // задействовать включение по датчику света
  bool  SC3Gr2OffD    : 1;              // задействовать выключение по датчику света
  bool  SC3Gr3On      : 1;              // задействовать выключение по времени
  bool  SC3Gr3Off     : 1;              // задействовать включение по времени
  bool  SC3Gr3OnD     : 1;              // задействовать включение по датчику света
  bool  SC3Gr3OffD    : 1;              // задействовать выключение по датчику света
  bool  SC3Gr4On      : 1;              // задействовать выключение по времени
  bool  SC3Gr4Off     : 1;              // задействовать включение по времени
  bool  SC3Gr4OnD     : 1;              // задействовать включение по датчику света
  bool  SC3Gr4OffD    : 1;              // задействовать выключение по датчику света
  bool  SC3Gr5On      : 1;              // задействовать выключение по времени
  bool  SC3Gr5Off     : 1;              // задействовать включение по времени
  bool  SC3Gr5OnD     : 1;              // задействовать включение по датчику света
  bool  SC3Gr5OffD    : 1;              // задействовать выключение по датчику света
};

struct  st_GrUlVOtpusk {                // участие группы света улицы в сцене отпуск
  bool  SCGR1  : 1;                     // группа участвует в сценарии отпуск              
  bool  SCGR2  : 1;                     // группа участвует в сценарии отпуск             
  bool  SCGR3  : 1;                     // группа участвует в сценарии отпуск             
  bool  SCGR4  : 1;                     // группа участвует в сценарии отпуск             
  bool  SCGR5  : 1;                     // группа участвует в сценарии отпуск             
};

struct  st_USK5 {                       // Управляющее слово К5                       ############   MB1   #################
  bool  ActT1   : 1;                    // Активация Т1              
  bool  ActT2   : 1;                    // Активация Т2             
  bool  ActT3   : 1;                    // Выключить свет в шкафу днем              
  bool  BraSC   : 1;                    // участие в сценарии отпуск             
  bool  TochSC  : 1;                    // участие в сценарии отпуск              
  bool  SvSc    : 1;                    // участие в сценарии отпуск  
};

struct  st_SostK5 {                     // Состояние потребителей в комнатн К5        ############   MB1   #################
  bool  Bra       : 1;                  // Состояние потребителя              
  bool  Toch      : 1;                  // Состояние потребителя             
  bool  Sv        : 1;                  // Состояние потребителя 
  bool  Split     : 1;                  // Состояние потребителя            
  bool  IzmNast   : 1;                  // Флаг изменения настроек              
};

struct  st_K5 {                         // Помещение №5 - детская спальня левая      ############   MB1   ################# 
  int   SVKoeff     : 16;               // значение освещенности улицы для света
  int   SVTimOn     : 16;               // Включить по времени  T1
  int   SVTimOff    : 16;               // Выключить по времении T2
  byte  SVRabGrup   : 8;                // Рабочая группа по освещенности
  byte  SVTimerOff  : 8;                // Выключить все по таймеру
  byte  SVGrupImun  : 8;                // Группа имунитет к общему выключению
  int   UstTemp     : 16;               // Установленная
  byte  PozPrior    : 8;                // Приоритет работы
  byte  SplitPrior  : 8;                // Приоритет работы  
  int   Temp        : 16;               // Температура
  int   Humidity    : 16;               // Влажность
  int   Light       : 16;               // Освещенность
  st_SostK5 SostK5;                     // Состояние потребителей в комнатн К
  st_USK5 USK5;                         // Управляющее слово К5
};

struct  st_USK6 {                       // Управляющее слово К6                       ############   MB1   #################
  bool  ActT1  : 1;                     // Выключить свет в шкафу 6 днем              
  bool  ActT2  : 1;                     // Выключить свет в шкафу 7 днем              
  bool  ActT3  : 1;                     // Днем по датчику включить гр света1  
};

struct  st_SostK6 {                     // Состояние потребителей в комнатн К6        ############   MB1   #################
  bool  K8Sv      : 1;                  // Состояние потребителя              
  bool  K7LED     : 1;                  // Состояние потребителя              
  bool  K7Sv      : 1;                  // Состояние потребителя             
  bool  K6Sv      : 1;                  // Состояние потребителя             
  bool  IzmNast   : 1;                  // Флаг изменения настроек
};

struct  st_K6 {                         // Помещение №6-8 - прихожая, гардеробы      ############   MB1   #################
  byte  LED_Urov    : 8;                // Уровень при  включении
  byte  TimOn       : 8;                // Время включения (розжига)
  byte  TimOff      : 8;                // Время выключения (затухания)
  byte  TimerOffD6  : 8;                // Задержка выкл при включении от датчика 6
  byte  TimerOffD7  : 8;                // Задержка выкл при включении от датчика 7
  byte  TimerOffD8  : 8;                // Задержка выкл при включении от датчика 8
  st_SostK6 SostK6;                     // Состояние потребителей в комнатн К6  
  st_USK6 USK6;                         // Управляющее слово К6                

};

struct  st_SostGR {                     // Состояние потребителей в гараже            ############   MB1   #################
  bool  GRV1O     : 1;                  // Открыты гараж              
  bool  GRV2O     : 1;                  // Открыты ворота             
  bool  GRV3O     : 1;                  // Открвта калитка              
  bool  GRV3Zam   : 1;                  // замок калитки              
  bool  GRSv1     : 1;                  // Вкл cвет Гр1             
  bool  GRSv2     : 1;                  // Вкл cвет Гр2             
  bool  GRDisel   : 1;                  // Работа от дизеля             

};

struct  st_GR {                         // Помещение гараж                            ############   MB1   ################# 
  int   UprKotlom   : 16;               // Управление котлом
  int   TokFazA     : 16;               // Ток по фазе А
  int   TokFazB     : 16;               // Ток по фазе В
  int   TokFazC     : 16;               // Ток по фазе С
  st_SostGR SostGR;                     // Состояние потребителей в гараже
};

struct  st_USK2 {                       // Управляющее слово К2                       ############   MB2   #################
  bool  ActT1     : 1;                  // Активация Т1              
  bool  ActT2     : 1;                  // Активация Т2             
  bool  ActT3     : 1;                  // Активация Т3             
  bool  ActT4     : 1;                  // Активация Т4             
  bool  ActT5     : 1;                  // Активация Т5             
  bool  ActT6     : 1;                  // Активация Т6             
  bool  ActL1     : 1;                  // Включить по освещенности улицы L1              
  bool  ActL2     : 1;                  // Выключить по освещенности улицы L2             
  bool  ActL3     : 1;                  // Открыть  по освещенности улицы L3              
  bool  ActL4     : 1;                  // Закрыть по освещенности улицы L4             
  bool  ActL5     : 1;                  // Закрыть если на улице темнее чем в комнате L5              
  bool  ActF1     : 1;                  // Антистрессовое выключение света F1             
  bool  ActF2     : 1;                  // Вне помещения F2             
  bool  ActF3     : 1;                  // Выключить свет в шкафу днем              
  bool  LEDSc     : 1;                  // участие в сценарии отпуск             
  bool  L_Gr1SC   : 1;                  // участие в сценарии отпуск             
  bool  L_Gr2SC   : 1;                  // участие в сценарии отпуск             
  bool  BrLevSc   : 1;                  // участие в сценарии отпуск             
  bool  BrPravSC  : 1;                  // участие в сценарии отпуск               
};

struct  st_SostK2 {                     // Состояние потребителей в помещении №2     ############   MB2   #################
  bool  IzmNast   : 1;                  // Флаг изменения настроек              
  bool  DatDver   : 1;                  // Открыта дверь на улицу              
  bool  tulCl     : 1;                  // Штора тюль закрыта              
  bool  tulOp     : 1;                  // Штора тюль открыта              
  bool  tenCl     : 1;                  // Штора тень закрыта              
  bool  tenOp     : 1;                  // Штора тень открыта              
  bool  Roz       : 1;                  // Состояние розеток             
  bool  L_Gr1     : 1;                  // Состояние потребителя             
  bool  L_Gr2     : 1;                  // Состояние потребителя             
  bool  K1Sv      : 1;                  // Состояние потребителя              
  bool  K1Wkaf    : 1;                  // Состояние потребителя              
  bool  BrLev     : 1;                  // Состояние потребителя             
  bool  BrPrav    : 1;                  // Состояние потребителя              
  bool  LED       : 1;                  // Состояние потребителя  
  bool  Split     : 1;                  // Состояние потребителя           
};

struct  st_K2 {                         // Помещение №2 Спальная левое крыло         ############   MB2   #################
  int   SVKoeff       : 16;             // значение освещенности улицы для света
  int   SVTimOn       : 16;             // Включить по времени  T1
  int   SVTimOff      : 16;             // Выключить по времении T2
  byte  SVRabGrup     : 8;              // Рабочая группа по освещенности
  byte  SVTimerOff    : 8;              // Выключить все по таймеру
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  byte  LED_Urov      : 8;              // Уровень при  включении
  byte  LED_TimOn     : 8;              // Время включения (розжига)
  byte  LED_TimOff    : 8;              // Время выключения (затухания)
  int   WtKoeff       : 16;             // корректор значение освещенности для штор
  byte  WtTimWork     : 8;              // Время полного открытия
  int   WtTimON1      : 16;             // Открыть по времени Т3
  int   WtTimOFF1     : 16;             // Затрыть по времени Т4
  int   WtTimON2      : 16;             // Открыть по времени Т5
  int   WtTimOFF2     : 16;             // Затрыть по времени Т6
  int   UstTemp       : 16;             // Температура
  byte  PozPrior      : 8;              // Розетки
  byte  SplitPrior    : 8;              // Кондиционер
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK2 USK2;                         // Управляющее слово К2                  
  st_SostK2 SostK2;                     // Состояние потребителей в помещении №2  
};

struct  st_USK3 {                       // Управляющее слово К3                       ############   MB2   #################
  bool  VVAll     : 1;                  // Включить вентилятор с любым светом              
  bool  VVgr1     : 1;                  // Включить вентилятор только с группой1             
  bool  VVgr2     : 1;                  // Включить вентилятор только с группой2             
  bool  VVgr3     : 1;                  // Включить вентилятор только с группой3             
  bool  ActT4     : 1;                  // Активация Т4              
  bool  AktT1     : 1;                  // Актив открытие по времени Т1              
  bool  AktT2     : 1;                  // Актив закрытие по времени Т2              
  bool  AktT3     : 1;                  // Актив закрытие по времени Т3              
  bool  OpenF1    : 1;                  // Открыть при включении вентилятора F1             
  bool  CloseF2   : 1;                  // Закрыть при выключении вентилятора F2             
  bool  K3Gr1Sc   : 1;                  // участие в сценарии отпуск              
  bool  K3Gr2Sc   : 1;                  // участие в сценарии отпуск              
  bool  K3Gr3Sc   : 1;                  // участие в сценарии отпуск              
              
};

struct  st_SostK3 {                     // Состояние потребителей в помещении №3     ############   MB2   #################
  bool  WindCl      : 1;                // Окно закрыто              
  bool  WindOp      : 1;                // Окно открыто             
  bool  Roz         : 1;                // Состояние розеток             
  bool  Gr3         : 1;                // Состояние потребителя             
  bool  Gr2         : 1;                // Состояние потребителя             
  bool  Gr1         : 1;                // Состояние потребителя             
  bool  IzmNast     : 1;                // Флаг изменения настроек             
          
};

struct  st_K3 {                         // Помещение №3 Ванная                       ############   MB2   #################
  byte  VVTimOff      : 8;              // Выключить по таймеру Т4
  byte  VVTimerOn     : 8;              // Отсрочка включения мин
  int   WindTimOp     : 16;             // Открыть по времени Т1
  int   WindTimCl     : 16;             // Закрыть по времени Т2
  int   WindTimWork   : 16;             // Время открытия/закрытия  окна
  byte  WindTimerCl   : 8;              // Закрыть по таймеру Т3
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  int   UstTemp       : 16;             // Установленная
  byte  PozPrior      : 8;              // Приоритет работы
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK3 USK3;                         // Управляющее слово К3                 
  st_SostK3 SostK3;                     // Состояние потребителей в помещении №3
};

struct  st_USK13 {                      // Управляющее слово К13                      ############   MB2   #################
  bool  ActT1       : 1;                // Активация Т1              
  bool  ActT2       : 1;                // Активация Т2              
  bool  ActT3       : 1;                // Активация Т3              
  bool  ActT4       : 1;                // Активация Т4              
  bool  ActT5       : 1;                // Активация Т5              
  bool  ActL1       : 1;                // Открыть  по освещенности улицы L1             
  bool  ActL2       : 1;                // Закрыть по освещенности улицы L2              
  bool  ActT6       : 1;                // ДД Включить ночью             
  bool  ActT7       : 1;                // ДД Включить постоянно             
  bool  ActT8       : 1;                // ДД Не включать              
  bool  ActT9       : 1;                // Свет по датчику             
  bool  ActT10      : 1;                // Вечером включать LED             
  bool  SmartDD     : 1;                // Активировать смарт датчик (включает свет в другой комнате по движению и выключает при выходе из комнаты)              
  bool  BrSc        : 1;                // Участие группы а сценарии Бра              
  bool  SvSc        : 1;                // Участие группы а сценарии              
              
              
};

struct  st_SostK13 {                    // Состояние потребителей в помещении №13    ############   MB2   #################
  bool  tulCl   : 1;                    // Штора тюль закрыта              
  bool  tulOp   : 1;                    // Штора тюль открыта              
  bool  tenCl   : 1;                    // Штора тень закрыта              
  bool  tenOp   : 1;                    // Штора тень открыта              
  bool  LED     : 1;                    // Состояние потребителя             
  bool  Br      : 1;                    // Состояние потребителя              
  bool  Sv      : 1;                    // Состояние потребителя              
           
          
};

struct  st_K13 {                        // Помещение №13 Корридор левый              ############   MB2   #################
  byte  WtTimOpen     : 8;              // Время полного открытия
  int   WtTimON1      : 16;             // Открыть по времени Т1
  int   WtTimOFF1     : 16;             // Затрыть по времени Т2
  int   WtTimON2      : 16;             // Открыть по времени Т3
  int   WtTimOFF2     : 16;             // Затрыть по времени Т4
  byte  DDTimUderzh   : 8;              // Время удержания сработки  датчика 
  byte  SVTimerOff    : 8;              // Выключить по таймеру T5
  byte  SVGRpoDat     : 8;              // Группа света вкл.  по датчику
  st_USK13 USK13;                       // Управляющее слово К13                 
  st_SostK13 SostK13;                   // Состояние потребителей в помещении №13

};

struct  st_USK17 {                      // Управляющее слово К17 сауна                ############   MB2   #################
  bool  AUTO      : 1;                  // Автоматический              
  bool  OFF       : 1;                  // Выключенной автоматики              
  bool  Mant      : 1;                  // Ручного управления             
  bool  Wint      : 1;                  // Зимний период              
  bool  Blok      : 1;                  // Блокировка от детей              
                            
};

struct  st_SostK17 {                    // Состояние потребителей в помещении №17    ############   MB2   #################
  bool  AvSX            : 1;            // Авария сухой ход              
  bool  AVPotok         : 1;            // Авария Нет потока             
  bool  AVBUU           : 1;            // Бактерицидный элемент подлежит замене             
  bool  AVPerel         : 1;            // Авария перелив              
  bool  Alarm           : 1;            // Авария оборудования             
  bool  Hfiltr1         : 1;            // Насос фильтр1             
  bool  Hdozir1         : 1;            // Насос дозирующ1             
  bool  Hdozir2         : 1;            // Насос дозирующ2             
  bool  L_bass          : 1;            // Свет бассейна              
  bool  Hfiltr2         : 1;            // Насос фильтр2             
  bool  Kl_doliv        : 1;            // Клапан долива              
  bool  kl_teplo        : 1;            // Клапан Теплообмена             
  bool  H_teplo         : 1;            // Насос теплообм              
  bool  H_protivt1      : 1;            // Насос противотока1             
  bool  H_protivt2      : 1;            // Насос противотока2             
  bool  H_protivt3      : 1;            // Насос противотока3             
  bool  Oxilife         : 1;            // Система Oxilife             
  bool  DU1             : 1;            // ДУ перелив              
  bool  DU2             : 1;            // ДУ Выкл долив             
  bool  DU3             : 1;            // ДУ Вкл долив              
  bool  DU4             : 1;            // ДУ Сухой ход              
  bool  DatPotok        : 1;            // Датчик потока              
  bool  SVTual          : 1;            // Свет туалет              
  bool  VVTual          : 1;            // Вентилятор туалета             
  bool  SVParGr1        : 1;            // Свет парилка Гр1             
  bool  SVParGr2        : 1;            // Свет парилка Гр2             
  bool  SVParGr3        : 1;            // Св КомОтдыха Гр1             
  bool  SVParGr4        : 1;            // Св КомОтдыха Гр2             
  bool  RozGr1          : 1;            // Розетка парилка1             
  bool  RozGr2          : 1;            // Розетка парилка2             
  bool  RozGr3          : 1;            // Розетка КомОтдыха 1              
  bool  RozGr4          : 1;            // Розетка КомОтдыха 2              
  bool  Split           : 1;            // Сплит 
  bool  IzmNast         : 1;            // Флаг изменения настроек 
};

struct  st_K17 {                        // Помещение №17 сауна                       ############   MB2   #################
  int   UstTempVody         : 16;       // Температура воды устав-ка
  byte  TimWorkH_filtr      : 8;        // Время работы насоса фильтрации
  byte  WeekStartProm       : 8;        // День недели начала промывки
  int   TimStartProm        : 16;       // Время начала промывки
  byte  TaimerProm          : 8;        // Продолжительность промывки
  int   LimWorkBUU          : 16;       // Время работы УФ аппарата (11000ч)
  byte  TimerWorkH_dozXlor  : 8;        // Время работы Дозир насоса хлора
  byte  PauzWorkH_dozXlor   : 8;        // Время паузы Дозир насоса хлора
  byte  TimerWorkH_dozWel   : 8;        // Время работы Дозир насоса щелочь
  byte  PauzWorkH_dozWel    : 8;        // Время паузы Дозир насоса щелочь
  int   TempVody            : 16;       // Температура воды
  st_USK17 USK17;                       // Управляющее слово К17               
  st_SostK17 SostK17;                   // Состояние потребителей в помещении №17

};

struct st_Outside{                      // Контроллер погоды                         ############   MB2   #################
  int  Temp       : 16;                 // Температура на улице
  int  Humid      : 16;                 // Влажность на улице
  int  Light      : 16;                 // Освещенность на улице  
};

struct  st_USK9 {                       // Управляющее слово К9 детская правая        ############   MB3   #################    
  bool  ActT2   : 1;                    // Активация Т2              
  bool  ActT3   : 1;                    // Активация Т3              
  bool  ActT4   : 1;                    // Активация Т4              
  bool  ActT5   : 1;                    // Активация Т5              
  bool  ActT6   : 1;                    // Активация Т6              
  bool  ActL1   : 1;                    // Включить по освещенности улицы L1             
  bool  ActL2   : 1;                    // Выключить по освещенности улицы L2              
  bool  ActL3   : 1;                    // Открыть  по освещенности улицы L3             
  bool  ActL4   : 1;                    // Закрыть по освещенности улицы L4              
  bool  ActL5   : 1;                    // Закрыть если на улице темнее чем в комнате L5             
  bool  ActF1   : 1;                    // Вне помещения F2              
  bool  ActF2   : 1;                    // Выключить свет в шкафу днем             
  bool  BraSc   : 1;                    // участие в сценарии отпуск              
  bool  TochSc  : 1;                    // участие в сценарии отпуск             
  bool  SvSc    : 1;                    // участие в сценарии отпуск               
              
};

struct  st_SostK9 {                     // Состояние потребителей в помещении №9     ############   MB3   #################
  bool  Split     : 1;                  // Состояние потребителя           
  bool  tulCl     : 1;                  // Штора тюль закрыта             
  bool  tulOp     : 1;                  // Штора тюль открыта              
  bool  tenCl     : 1;                  // Штора тень закрыта              
  bool  tenOp     : 1;                  // Штора тень открыта              
  bool  Roz       : 1;                  // Состояние розеток             
  bool  Bra       : 1;                  // Состояние потребителя             
  bool  Toch      : 1;                  // Состояние потребителя              
  bool  Sv        : 1;                  // Состояние потребителя              
  bool  IzmNast   : 1;                  // Флаг изменения настроек          
        
};

struct  st_K9 {                         // Помещение №9 детская правая               ############   MB3   #################
  int   SVKoeff         : 16;           // значение освещенности улицы для света
  int   SVTimOn         : 16;           // Включить по времени  T1
  int   SVTimOff        : 16;           // Выключить по времении T2
  byte  SVRabGrup       : 8;            // Рабочая группа по освещенности
  byte  SVTimerOff      : 8;            // Выключить все по таймеру
  byte  SVGrupImun      : 8;            // Группа имунитет к общему выключению
  int   WtKoeff         : 16;           // корректор значение освещенности для штор
  byte  WtTimOpen       : 8;            // Время полного открытия
  int   WtTimON1        : 16;           // Открыть по времени Т3
  int   WtTimOFF1       : 16;           // Затрыть по времени Т4
  int   WtTimON2        : 16;           // Открыть по времени Т5
  int   WtTimOFF2       : 16;           // Затрыть по времени Т6
  int   UstTemp         : 16;           // Установленная
  byte  PozPrior        : 8;            // Приоритет работы
  byte  SplitPrior      : 8;            // Приоритет работы
  int   Temp            : 16;           // Температура
  int   Humidity        : 16;           // Влажность
  int   Light           : 16;           // Освещенность
  st_USK9 USK9;                         // Управляющее слово К9                 
  st_SostK9 SostK9;                     // Состояние потребителей в помещении №9


};

struct  st_USK10 {                      // Управляющее слово К10                      ############   MB3   #################
  bool  ActT1  : 1;                     // Активация Т1             
  bool  ActT2  : 1;                     // Активация Т2              
  bool  ActL1  : 1;                     // Включить по освещенности улицы L1             
  bool  ActL2  : 1;                     // Выключить по освещенности улицы L2              
  bool  ActF1  : 1;                     // Вне помещения F2              
  bool  ActF2  : 1;                     // Выключить свет в шкафу днем             
  bool  LEDSC  : 1;                     // участие в сценарии отпуск              
  bool  BraSc  : 1;                     // участие в сценарии отпуск              
  bool  SvSc   : 1;                     // участие в сценарии отпуск             
           
              
};

struct  st_SostK10 {                    // Состояние потребителей в помещении №10    ############   MB3   #################
  bool  Split       : 1;                // Состояние потребителя           
  bool  Roz         : 1;                // Состояние розеток              
  bool  LED         : 1;                // Состояние потребителя              
  bool  Bra         : 1;                // Состояние потребителя             
  bool  Sv          : 1;                // Состояние потребителя              
  bool  IzmNast     : 1;                // Флаг изменения настроек       
};

struct  st_K10 {                        // Помещение №10                             ############   MB3   #################
  int   SVKoeff       : 16;             // значение освещенности улицы для света
  int   SVTimOn       : 16;             // Включить по времени  T1
  int   SVTimOff      : 16;             // Выключить по времении T2
  byte  SVRabGrup     : 8;              // Рабочая группа по освещенности
  byte  SVTimerOff    : 8;              // Выключить все по таймеру
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  int   UstTemp       : 16;             // Установленная
  byte  PozPrior      : 8;              // Приоритет работы
  byte  SplitPrior    : 8;              // Приоритет работы
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK10 USK10;                       // Управляющее слово К10            
  st_SostK10 SostK10;                   // Состояние потребителей в помещении №10

};

struct  st_USK11 {                      // Управляющее слово К11                      ############   MB3   #################
  bool  ActT1     : 1;                  // Активация Т1              
  bool  ActT2     : 1;                  // Активация Т2              
  bool  ActT3     : 1;                  // Активация Т3              
  bool  ActT4     : 1;                  // Активация Т4              
  bool  ActT5     : 1;                  // Активация Т5              
  bool  ActL1     : 1;                  // Включить по освещенности улицы L1             
  bool  ActL2     : 1;                  // Выключить по освещенности улицы L2              
  bool  ActF1     : 1;                  // Вне помещения F2              
  bool  TochSC    : 1;                  // участие в сценарии отпуск             
  bool  SvSC      : 1;                  // участие в сценарии отпуск             
              
              
};

struct  st_SostK11 {                    // Состояние потребителей в помещении №11    ############   MB3   #################        
  bool  IzmNast     : 1;                // Флаг изменения настроек 
  bool  WindCl      : 1;                // Окно закрыто              
  bool  WindOp      : 1;                // Окно открыто             
  bool  Toch        : 1;                // Состояние потребителя              
  bool  Sv          : 1;                // Состояние потребителя 
  
};

struct  st_K11 {                        // Помещение №11                             ############   MB3   #################
  int   SVKoeff       : 16;             // значение освещенности улицы для света
  int   SVTimOn       : 16;             // Включить по времени  T1
  int   SVTimOff      : 16;             // Выключить по времении T2
  byte  SVRabGrup     : 8;              // Рабочая группа по освещенности
  byte  SVTimerOff    : 8;              // Выключить все по таймеру
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  int   WindTimOp     : 16;             // Открыть по времени Т3
  int   WindTimCl     : 16;             // Закрыть по времени Т4
  int   WindTimWork   : 16;             // Время открытия/закрытия  окна
  byte  WindTimerCl   : 8;              // Закрыть по таймеру Т5
  int   UstTemp       : 16;             // Установленная
  byte  PozPrior      : 8;              // Приоритет работы
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK11 USK11;                       // Управляющее слово К11                
  st_SostK11 SostK11;                   // Состояние потребителей в помещении №11

};

struct  st_USK12 {                      // Управляющее слово К12                      ############   MB3   #################
  bool  ActT1       : 1;                // Активация Т1              
  bool  ActT2       : 1;                // Активация Т2              
  bool  ActT3       : 1;                // Активация Т3              
  bool  ActT4       : 1;                // Активация Т4              
  bool  ActT5       : 1;                // Активация Т5              
  bool  ActL1       : 1;                // Включить по освещенности улицы L1             
  bool  ActL2       : 1;                // Выключить по освещенности улицы L2              
  bool  ActF1       : 1;                // Вне помещения F2                
  bool  VVAll       : 1;                // Включить вентилятор с любым светом              
  bool  VVgr1       : 1;                // Включить вентилятор только с группой1             
  bool  VVgr2       : 1;                // Включить вентилятор только с группой2             
  bool  VVgr3       : 1;                // Включить вентилятор только с группой3             
  bool  ActT6       : 1;                // Активация Т5              
  bool  AktT1       : 1;                // Актив открытие по времени Т3             
  bool  AktT2       : 1;                // Актив закрытие по времени Т4              
  bool  AktT3       : 1;                // Актив закрытие по времени Т5              
  bool  OpenF1      : 1;                // Открыть при включении вентилятора F1             
  bool  CloseF2     : 1;                // Закрыть при выключении вентилятора F2             
  bool  K12TochSc   : 1;                // участие в сценарии отпуск              
  bool  K12SvSc     : 1;                // участие в сценарии отпуск              
            
};

struct  st_SostK12 {                    // Состояние потребителей в помещении №12    ############   MB3   #################          
  bool  IzmNast     : 1;                // Флаг изменения настроек 
  bool  LED         : 1;                // Состояние потребителя              
  bool  Mirr        : 1;                // Состояние потребителя              
  bool  WindCl      : 1;                // Окно закрыто             
  bool  WindOp      : 1;                // Окно открыто             
  bool  Toch        : 1;                // Состояние потребителя              
  bool  Sv          : 1;                // Состояние потребителя              
        
};

struct  st_K12 {                        // Помещение №12                             ############   MB3   #################
  int   SVKoeff       : 16;             // значение освещенности улицы для света
  int   SVTimOn       : 16;             // Включить по времени  T1
  int   SVTimOff      : 16;             // Выключить по времении T2
  byte  SVRabGrup     : 8;              // Рабочая группа по освещенности
  byte  SVTimerOff    : 8;              // Выключить все по таймеру
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  int   WindTimOp     : 16;             // Открыть по времени Т3
  int   WindTimCl     : 16;             // Закрыть по времени Т4
  int   WindTimWork   : 16;             // Время открытия/закрытия  окна
  byte  WindTimerCl   : 8;              // Закрыть по таймеру Т5
  int   UstTemp       : 16;             // Установленная
  byte  PozPrior      : 8;              // Приоритет работы
  byte  VVPausON      : 8;              // Отсрочка включения мин
  byte  VVTimrOff     : 8;              // Выключить по таймеру Т6
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK12 USK12;                       // Управляющее слово К12           
  st_SostK12 SostK12;                   // Состояние потребителей в помещении №12

};

struct  st_USK15 {                      // Управляющее слово К15                      ############   MB3   #################
  bool  ActT1     : 1;                  // Активация Т1              
  bool  ActT2     : 1;                  // Активация Т2              
  bool  ActT3     : 1;                  // Активация Т3              
  bool  ActT4     : 1;                  // Активация Т4              
  bool  ActT5     : 1;                  // Активация Т5              
  bool  ActL1     : 1;                  // Открыть  по освещенности улицы L1             
  bool  ActL2     : 1;                  // Закрыть по освещенности улицы L2              
  bool  ActT6     : 1;                  // ДД Включить ночью             
  bool  ActT7     : 1;                  // ДД Включить постоянно             
  bool  ActT8     : 1;                  // ДД Не включать              
  bool  ActT9     : 1;                  // Свет по датчику             
  bool  ActT10    : 1;                  // Вечером включать LED             
  bool  SmartDD   : 1;                  // Активировать смарт датчик (включает свет в другой комнате по движению и выключает при выходе из комнаты)              
  bool  KBrSc     : 1;                  // участие в сценарии отпуск              
  bool  KSvSc     : 1;                  // участие в сценарии отпуск              
              
              
};

struct  st_SostK15 {                    // Состояние потребителей в помещении №15    ############   MB3   #################          
  bool  IzmNast   : 1;                  // Флаг изменения настроек 
  bool  tulCl     : 1;                  // Штора тюль закрыта              
  bool  tulOp     : 1;                  // Штора тюль открыта              
  bool  tenCl     : 1;                  // Штора тень закрыта              
  bool  tenOp     : 1;                  // Штора тень открыта              
  bool  LED       : 1;                  // Состояние потребителя             
  bool  Br        : 1;                  // Состояние потребителя              
  bool  Sv        : 1;                  // Состояние потребителя              
        
};

struct  st_K15 {                        // Помещение №15                             ############   MB3   #################
  byte  WtTimOpen     : 8;              // Время полного открытия
  int   WtTimON1      : 16;             // Открыть по времени Т1
  int   WtTimOFF1     : 16;             // Затрыть по времени Т2
  int   WtTimON2      : 16;             // Открыть по времени Т3
  int   WtTimOFF2     : 16;             // Затрыть по времени Т4
  byte  DDTimWork     : 8;              // Время удержания сработки  датчика 
  byte  SVTimerOff    : 8;              // Выключить по таймеру T5
  byte  SVRGrupDat    : 8;              // Группа света вкл.  по датчику
  st_USK15 USK15;                       // Управляющее слово К15              
  st_SostK15 SostK15;                   // Состояние потребителей в помещении №15

};

struct  st_USK16 {                      // Управляющее слово К16                      ############   MB3   #################
  bool  K16L1C1   : 1;                  // Люстра Сцена 1              
  bool  K16L1C2   : 1;                  // Люстра Сцена 2              
  bool  K16L1C3   : 1;                  // Люстра Сцена 3              
  bool  K16L1C4   : 1;                  // Люстра Сцена 4              
  bool  K16L2C1   : 1;                  // Столешница Гр1 Сцена 1              
  bool  K16L2C2   : 1;                  // Столешница Гр1 Сцена 2              
  bool  K16L2C3   : 1;                  // Столешница Гр1 Сцена 3              
  bool  K16L2C4   : 1;                  // Столешница Гр1 Сцена 4              
  bool  K16L3C1   : 1;                  // Пано Сцена 1              
  bool  K16L3C2   : 1;                  // Пано Сцена 2              
  bool  K16L3C3   : 1;                  // Пано Сцена 3              
  bool  K16L3C4   : 1;                  // Пано Сцена 4              
  bool  K16L4C1   : 1;                  // Столешница Гр2 Сцена 1              
  bool  K16L4C2   : 1;                  // Столешница Гр2 Сцена 2              
  bool  K16L4C3   : 1;                  // Столешница Гр2 Сцена 3              
  bool  K16L4C4   : 1;                  // Столешница Гр2 Сцена 4              
  bool  K16L5C1   : 1;                  // Столешница Гр3 Сцена 1              
  bool  K16L5C2   : 1;                  // Столешница Гр3 Сцена 2              
  bool  K16L5C3   : 1;                  // Столешница Гр3 Сцена 3              
  bool  K16L5C4   : 1;                  // Столешница Гр3 Сцена 4              
  bool  K16L6C1   : 1;                  // LED Сцена 1             
  bool  K16L6C2   : 1;                  // LED Сцена 2             
  bool  K16L6C3   : 1;                  // LED Сцена 3             
  bool  K16L6C4   : 1;                  // LED Сцена 4             
  bool  ActT1     : 1;                  // Активация Т1              
  bool  ActT2     : 1;                  // Активация Т2              
  bool  ActT3     : 1;                  // Активация Т3              
  bool  ActT4     : 1;                  // Активация Т4              
  bool  ActT5     : 1;                  // Активация Т5              
  bool  ActT6     : 1;                  // Активация Т6              
  bool  ActL1     : 1;                  // Открыть  по освещенности улицы L1             
  bool  ActL2     : 1;                  // Закрыть по освещенности улицы L2              
                          
};

struct  st_SostK16 {                    // Состояние потребителей в помещении №16    ############   MB3   #################
  bool  Split       : 1;                // Состояние потребителя           
  bool  IzmNast     : 1;                // Флаг изменения настроек 
  bool  DatDver1    : 1;                // Датчик двери из бассейна              
  bool  DatDver2    : 1;                // Датчик двери из зоны барбекю             
  bool  Sv          : 1;                // Состояние потребителя              
  bool  Gr1         : 1;                // Состояние потребителя             
  bool  Gr2         : 1;                // Состояние потребителя             
  bool  Gr3         : 1;                // Состояние потребителя             
  bool  Pano        : 1;                // Состояние потребителя              
  bool  LED         : 1;                // Состояние потребителя             
        
};

struct  st_K16 {                        // Помещение №16                             ############   MB3   #################
  int   SVKoeff       : 16;             // значение освещенности улицы для света
  int   SVTimOn       : 16;             // Включить по времени  T1
  int   SVTimOff      : 16;             // Выключить по времении T2
  byte  SVRabGrup     : 8;              // Рабочая группа по освещенности
  byte  SVTimerOff    : 8;              // Выключить все по таймеру
  byte  SVGrupImun    : 8;              // Группа имунитет к общему выключению
  int   WtKoeff       : 16;             // корректор значение освещенности для штор
  byte  WtTimOpen1    : 8;              // Время полного открытия Штора 1
  byte  WtTimOpen2    : 8;              // Время полного открытия Штора 2
  byte  WtTimOpen3    : 8;              // Время полного открытия Штора 3
  int   WtTimON1      : 16;             // Открыть по времени Т3
  int   WtTimOFF1     : 16;             // Затрыть по времени Т4
  int   WtTimON2      : 16;             // Открыть по времени Т5
  int   WtTimOFF2     : 16;             // Затрыть по времени Т6
  byte  SplitPrior    : 8;              // Приоритет работы
  byte  PozPrior1     : 8;              // Приоритет работы Гр1 кофемаш и микров
  byte  PozPrior2     : 8;              // Приоритет работы Гр2 духовка
  byte  PozPrior3     : 8;              // Приоритет работы Гр3 Варочная панель
  byte  PozPrior4     : 8;              // Приоритет работы Гр4 Холодильник
  byte  PozPrior5     : 8;              // Приоритет работы Гр5 общие
  byte  VVTimerOFF    : 8;              // Таймер работы после выключения (ативировать при выключении света на кухни)
  int   UstTemp       : 16;             // Установленная
  byte  LED_Urov      : 8;              // Уровень при  включении
  byte  LED_TimOn     : 8;              // Время включения (розжига)
  byte  LED_TimOff    : 8;              // Время выключения (затухания)
  byte  LEDTimerOff   : 8;              // Задержка выкл при включении от датчика 
  byte  SCSveta       : 8;              // Включена сцена
  int   Temp          : 16;             // Температура
  int   Humidity      : 16;             // Влажность
  int   Light         : 16;             // Освещенность
  st_USK16 USK16;                       // Управляющее слово К16               
  st_SostK16 SostK16;                   // Состояние потребителей в помещении №16

};

struct  st_USK14 {                      // Управляющее слово К14                      ############   MB3   #################
  bool  K14L1C1   : 1;                  // Люстра боль Сцена 1              
  bool  K14L1C2   : 1;                  // Люстра боль Сцена 2             
  bool  K14L1C3   : 1;                  // Люстра боль Сцена 3             
  bool  K14L1C4   : 1;                  // Люстра боль Сцена 4             
  bool  K14L2C1   : 1;                  // Люстра мал Сцена 1              
  bool  K14L2C2   : 1;                  // Люстра мал Сцена 2              
  bool  K14L2C3   : 1;                  // Люстра мал Сцена 3              
  bool  K14L2C4   : 1;                  // Люстра мал Сцена 4              
  bool  K14L3C1   : 1;                  // Пано Сцена 1              
  bool  K14L3C2   : 1;                  // Пано Сцена 2              
  bool  K14L3C3   : 1;                  // Пано Сцена 3              
  bool  K14L3C4   : 1;                  // Пано Сцена 4              
  bool  K14L4C1   : 1;                  // Зеркало Сцена 1             
  bool  K14L4C2   : 1;                  // Зеркало Сцена 2             
  bool  K14L4C3   : 1;                  // Зеркало Сцена 3             
  bool  K14L4C4   : 1;                  // Зеркало Сцена 4             
  bool  K14L5C1   : 1;                  // Подсвет ТВ Сцена 1              
  bool  K14L5C2   : 1;                  // Подсвет ТВ Сцена 2              
  bool  K14L5C3   : 1;                  // Подсвет ТВ Сцена 3              
  bool  K14L5C4   : 1;                  // Подсвет ТВ Сцена 4              
  bool  K14L6C1   : 1;                  // LED Сцена 1             
  bool  K14L6C2   : 1;                  // LED Сцена 2             
  bool  K14L6C3   : 1;                  // LED Сцена 3             
  bool  K14L6C4   : 1;                  // LED Сцена 4 
  bool  ActT1     : 1;                  // Активация Т1              
  bool  ActT2     : 1;                  // Активация Т2              
  bool  ActT3     : 1;                  // Активация Т3              
  bool  ActT4     : 1;                  // Активация Т4              
  bool  ActT5     : 1;                  // Активация Т5              
  bool  ActT6     : 1;                  // Активация Т6              
  bool  ActL1     : 1;                  // Открыть  по освещенности улицы L1             
  bool  ActL2     : 1;                  // Закрыть по освещенности улицы L2              
  bool  ActT7     : 1;                  // ДД Включить ночью              
  bool  ActT8     : 1;                  // ДД Включить постоянно             
  bool  ActT9     : 1;                  // ДД Не включать              
  bool  ActT10    : 1;                  // Свет по датчику              
  bool  ActT11    : 1;                  // Вечером включать LED   
  bool  SmartDD   : 1;                  // Активировать смарт датчик (включает свет в другой комнате по движению и выключает при выходе из комнаты)              
              
              
};

struct  st_SostK14 {                    // Состояние потребителей в помещении №14    ############   MB3   #################
  bool  Split         : 1;              // Состояние потребителя           
  bool  IzmNast       : 1;              // Флаг изменения настроек 
  bool  DatDver       : 1;              // Датчик двери из бассейна              
  bool  Sv1           : 1;              // Состояние потребителя             
  bool  Sv2           : 1;              // Состояние потребителя             
  bool  TV            : 1;              // Состояние потребителя              
  bool  Mirr          : 1;              // Состояние потребителя              
  bool  Pano          : 1;              // Состояние потребителя              
  bool  LED           : 1;              // Состояние потребителя 
          
};

struct  st_K14 {                        // Помещение №14                             ############   MB3   #################
  int   SVKoeff         : 16;           // значение освещенности улицы для света
  int   SVTimOn         : 16;           // Включить по времени  T1
  int   SVTimOff        : 16;           // Выключить по времении T2
  byte  SVRabGrup       : 8;            // Рабочая группа по освещенности
  byte  SVTimerOff      : 8;            // Выключить все по таймеру
  byte  SVGrupImun      : 8;            // Группа имунитет к общему выключению
  byte  SVTimerOffDD    : 8;            // Выключить по таймеру T5 при вкл от датч
  byte  SVRGrupDat      : 8;            // Группа света вкл.  по датчику
  int   WtKoeff         : 16;           // корректор значение освещенности для штор
  byte  WtTimOpen       : 8;            // Время полного открытия Штора 1
  int   WtTimON1        : 16;           // Открыть по времени Т3
  int   WtTimOFF1       : 16;           // Затрыть по времени Т4
  int   WtTimON2        : 16;           // Открыть по времени Т5
  int   WtTimOFF2       : 16;           // Затрыть по времени Т6
  byte  SplitPrior      : 8;            // Приоритет работы
  byte  PozPrior1       : 8;            // Приоритет работы 
  int   UstTemp         : 16;           // Установленная
  byte  LED_Urov        : 8;            // Уровень при  включении
  byte  LED_TimOn       : 8;            // Время включения (розжига)
  byte  LED_TimOff      : 8;            // Время выключения (затухания)
  byte  LEDTimerOff     : 8;            // Задержка выкл при включении от датчика 
  byte  DDTimWork       : 8;            // Время удержания сработки  датчика
  byte  SCSveta         : 8;            // Включена сцена
  int   Temp            : 16;           // Температура
  int   Humidity        : 16;           // Влажность
  int   Light           : 16;           // Освещенность
  st_USK14 USK14;                       // Управляющее слово К14                
  st_SostK14 SostK14;                   // Состояние потребителей в помещении №14

};


struct  st_INPUT{                       //
  bool  QF17_Bass      :   1;           // QF Бассейн
  bool  QF2_Roz        :   1;           // QF Розетки К2
  bool  _RHZ_Ruch      :   1;           // Ручн режим
  bool  QF2_Wtora      :   1;           // QF штора К2
  bool  QF2_Split      :   1;           // QF кондей К2
  bool  KN2_LED        :   1;           // KN LED
  bool  KN2_Wtora1C    :   1;           // KN1 ШторыК2  Закр
  bool  KN2_Wtora1O    :   1;           // KN1 ШторыК2 Откр
  bool  KN2_BraL       :   1;           // KN Бра К2 Лев
  bool  KN2_BraR       :   1;           // KN Бра К2 Прав
  bool  KN2_Wtora2C    :   1;           // KN2 ШторыК2  Закр
  bool  KN2_Wtora2O    :   1;           // KN2 ШторыК2 Откр
  bool  KN17_Svet      :   1;           // KN Свет бассейн
  bool  KN1_Svet       :   1;           // KN Свет гардероб
  bool  Out2_KnSvet    :   1;           // Сигнал от кнопки на контр LED К2
  bool  QF3_Roz        :   1;           // QF розетки К3
  bool  QF3_Okno       :   1;           // QF окно К3
  bool  QF5_Roz        :   1;           // QF розетки К5
  bool  QF5_Split      :   1;           // QF кондей К5
  bool  QF6_Roz        :   1;           // QF розетки К6-8
  bool  QF9_Roz        :   1;           // QF розетки К9
  bool  KN3_SvetGr1    :   1;           // KN Свет К3 Гр1
  bool  KN3_SvetGr2    :   1;           // KN Свет К3 Гр2
  bool  KN3_OknoO      :   1;           // KN Окно откр К3
  bool  KN3_OknoC      :   1;           // KN Окно закр К3
  bool  KN5_Svet       :   1;           // KN свет К5 люстра
  bool  KN5_Toch       :   1;           // KN свет К5 точки
  bool  KN5_Bra        :   1;           // KN свет К5 бра
  bool  KN18_Svet1Gr1  :   1;           // KN свет Улицы Гр1
  bool  KN18_Svet1Gr2  :   1;           // KN свет Улицы Гр2
  bool  KN_SvetALL     :   1;           // KN Выкл свет во всем доме
  bool  KN9_Svet       :   1;           // KN свет К9 люстр
  bool  KN9_Toch       :   1;           // KN свет К9 точки
  bool  KN9_Bra        :   1;           // KN свет К9 бра
  bool  KN9_WtoraC     :   1;           // KN ШторыК9  Закр
  bool  KN9_WtoraO     :   1;           // KN ШторыК9 Откр
  bool  QF9_Wtora      :   1;           // QF штора К9
  bool  QF10_Roz       :   1;           // QF розетки  К10-11
  bool  QF10_Split     :   1;           // QF кондей К10
  bool  QF11_Okno      :   1;           // QF окно К11
  bool  KN10_Svet      :   1;           // KN свет К10 люстра
  bool  KN10_Bra       :   1;           // KN свет К10 бра
  bool  KN10_LED       :   1;           // KN свет К10 LED
  bool  KN11_OknoO     :   1;           // KN Окно откр К11
  bool  KN11_OknoC     :   1;           // KN Окно закр К11
  bool  KN11_Svet      :   1;           // KN свет К11 люстр
  bool  KN11_Toch      :   1;           // KN свет К11 точки
  bool  KN12_Svet      :   1;           // KN свет К12 люстр
  bool  KN12_Toch      :   1;           // KN свет К12 точки
  bool  KN12_OknoO     :   1;           // KN Окно откр К12
  bool  KN12_OknoC     :   1;           // KN Окно закр К12
  bool  Out16_KnSvet   :   1;           // Сигнал от кнопки на контр LED К16
  bool  KN16_Sc1       :   1;           // KN сцена1 К16
  bool  KN16_Sc2       :   1;           // KN сцена2 К16
  bool  KN16_Sc3       :   1;           // KN сцена3 К16
  bool  KN16_Sc4       :   1;           // KN сцена4 К16
  bool  QF12_Okno      :   1;           // QF окно К12
  bool  QF12_Roz       :   1;           // QF розетки  К12
  bool  QF16_Wtora     :   1;           // QF штора К16
  bool  QF16_Roz1      :   1;           // QF розетки  К16-1
  bool  QF16_Roz2      :   1;           // QF розетки  К16-2
  bool  KN15_Svet      :   1;           // KN свет К15 люстра
  bool  KN15_Bra       :   1;           // KN свет К15 бра
  bool  QF16_RozXold   :   1;           // QF холодильник
  bool  QF16_Roz4      :   1;           // QF розетки  К16
  bool  QF16_Split     :   1;           // QF кондей К16
  bool  QF16_Vytjahz   :   1;           // QF вытяжка К16
  bool  QF16_PWM16     :   1;           // QF контрол PWM16
  bool  QF19_Obw       :   1;           // QF зона барбекю
  bool  KN13_Svet      :   1;           // KN свет К13 люстра
  bool  KN13_Bra       :   1;           // KN свет К13 бра
  bool  QF16_Roz3      :   1;           // QF розетки  К16-3
  bool  QF13_Wtora     :   1;           // QF штора К13
  bool  Dat13_Dvizh1   :   1;           // Дат движен 1 К13
  bool  Dat13_Dvizh2   :   1;           // Дат движен 2 К13
  bool  Out14_KnSvet   :   1;           // Сигнал от кнопки на контр LED К14
  bool  KN14_SC1       :   1;           // KN сцена1 К14
  bool  KN14_SC2       :   1;           // KN сцена2 К14
  bool  KN14_SC3       :   1;           // KN сцена3 К14
  bool  KN14_SC4       :   1;           // KN сцена4 К14
  bool  KN14_WtoraC    :   1;           // KN ШторыК14  Закр
  bool  KN14_WtoraO    :   1;           // KN ШторыК14 Откр
  bool  QF14_Roz       :   1;           // QF Розетки К14
  bool  QF14_Wtora     :   1;           // QF Шторы К14
  bool  QF4_RozStirM   :   1;           // QF Розетка стирал маш
  bool  QF4_RozSuwM    :   1;           // QF Розетка сушил маш
  bool  QF4_Roz        :   1;           // QF Розет К4
  bool  QF4_Split      :   1;           // QF Кондиц К4
  bool  QF14_Split     :   1;           // QF Кондиц К14
  bool  QF4_Vytjahz    :   1;           // QF Вытяжка К4
  bool  QF4_Wtora      :   1;           // QF Шторы К4
  bool  KN4_Svet       :   1;           // KN свет К4 люстра
  bool  KN4_TochGr1    :   1;           // KN свет К4 точки Гр1
  bool  KN4_TochGr2    :   1;           // KN свет К4 точки Гр2
  bool  KN4_LED        :   1;           // KN свет К4 LED
  bool  KN4_WtoraC     :   1;           // KN ШторыК4  Закр
  bool  KN4_WtoraO     :   1;           // KN ШторыК4 Откр
  bool  KN18_Svet2Gr1  :   1;           // Кн Свет улицы Гр1
  bool  KN18_Svet2Gr2  :   1;           // Кн Свет улицы Гр2
};

struct st_OUTPUT{                       //
  bool  KM2_SvetGr1    :   1;           // KM Свет K2 Гр1 (KK1.1)
  bool  KM2_SvetGr2    :   1;           // KM Свет K2 Гр2 (KK1.2)
  bool  KM1_SvetGr1    :   1;           // KM Свет K1 Гр1 (KK1.3)
  bool  KM1_SvetGr2    :   1;           // KM Свет K1 Гр2 (KK1.4)
  bool  KM2_BraL       :   1;           // KM Свет K2 Бра Лев (KK1.5)
  bool  KM2_BraR       :   1;           // KM Свет K2 Бра Прав (KK1.6)
  bool  KM2_WtoraTulO  :   1;           // KM Штора К2 тюль Откр (KK1.7)
  bool  KM2_WtoraTulC  :   1;           // KM Штора К2 тюль Закр (KK1.8)
  bool  KM2_WtoraTenO  :   1;           // KM Штора К2 тень Откр (KK1.9)
  bool  KM2_WtoraTenC  :   1;           // KM Штора К2 тень Закр (KK1.10)
  bool  KM2_Roz        :   1;           // КМ Розетки К2 (KK1.11)
  bool  KM2_Split      :   1;           // КМ Сплит К2 (KK1.12)
  bool  KM3_SvetGr1    :   1;           // KM Свет K3 Гр1 (KK1.13)
  bool  KM3_SvetGr2    :   1;           // KM Свет K3 Гр2 (KK1.14)
  bool  KM3_SvetGr3    :   1;           // KM Свет K3 Гр3 (KK1.15)
  bool  KM3_Roz        :   1;           // КМ Розетки К3 (KK1.16)
  bool  KM5_Svet       :   1;           // КМ Свет К5 (KK2.1)
  bool  KM5_Toch       :   1;           // КМ Точки К5 (KK2.2)
  bool  KM5_Bra        :   1;           // КМ Бра К5 (KK2.3)
  bool  KM5_Wkaf       :   1;           // КМ Шкаф К5 (KK2.4)
  bool  KM5_Roz        :   1;           // КМ Розетки К5 (KK2.5)
  bool  KM5_Split      :   1;           // КМ Сплит К5 (KK2.6)
  bool  KM6_Roz        :   1;           // КМ Розетки 6-8 (KK2.7)
  bool  KM6_Wkaf       :   1;           // КМ Шкаф К6 (KK2.8)
  bool  KM8_Wkaf       :   1;           // КМ Шкаф К8 (KK2.9)
  bool  KM9_Svet       :   1;           // КМ Свет К9 (KK2.10)
  bool  KM9_Toch       :   1;           // КМ Точки К9 (KK2.11)
  bool  KM9_Bra        :   1;           // КМ Бра К9 (KK2.12)
  bool  KM9_Wkaf       :   1;           // КМ Шкаф К9 (KK2.13)
  bool  KM9_Roz        :   1;           // КМ Розетки К9 (KK2.14)
  bool  KM9_Split      :   1;           // КМ Сплит К9 (KK2.15)
  bool  KM10_Split     :   1;           // КМ Сплит К10 (KK2.16)
  bool  KM9_OknoO      :   1;           // КМ Окно К9 Откр (KK3.1)
  bool  KM9_OknoC      :   1;           // КМ Окно К9 Закр (KK3.2)
  bool  KM9_WtoraTulO  :   1;           // KM Штора К9 тюль Откр (KK3.3)
  bool  KM9_WtoraTulC  :   1;           // KM Штора К9 тюль Закр (KK3.4)
  bool  KM9_WtoraTenO  :   1;           // KM Штора К9 тень Откр (KK3.5)
  bool  KM9_WtoraTenC  :   1;           // KM Штора К9 тень Закр (KK3.6)
  bool  KM11_OknoO     :   1;           // КМ Окно К11 Откр (KK3.7)
  bool  KM11_OknoC     :   1;           // КМ Окно К11 Закр (KK3.8)
  bool  KM10_Svet      :   1;           // КМ Свет К10 (KK3.9)
  bool  KM11_Toch      :   1;           // КМ Точки К11 (KK3.10)
  bool  KM11_Svet      :   1;           // КМ Свет К11 (KK3.11)
  bool  KM10_Bra       :   1;           // КМ Бра К10 (KK3.12)
  bool  KM11_LED       :   1;           // КМ LED К11 (KK3.13)
  bool  KM10_Roz       :   1;           // КМ Розетки К10 (KK3.14)
  bool  KM12_OknoO     :   1;           // КМ Окно К12 Откр (KK3.15)
  bool  KM12_OknoC     :   1;           // КМ Окно К12 Закр (KK3.16)
  bool  KM12_Roz       :   1;           // КМ Розетки К12 (KK4.1)
  bool  KM12_Svet      :   1;           // КМ Свет К11 (KK4.2)
  bool  KM12_Mirr      :   1;           // КМ Зеркало К12 (KK4.3)
  bool  KM12_Toch      :   1;           // КМ Точки К12 (KK4.4)
  bool  KM12_LED       :   1;           // КМ LED К12 (KK4.5)
  bool  KM12_Vytjahz   :   1;           // КМ Вентилятор К12 (KK4.6)
  bool  KM16_Roz1      :   1;           // КМ Роз Кофмашина микров (KK4.7)
  bool  KM16_Roz2      :   1;           // КМ Роз Духов (KK4.8)
  bool  KM16_Roz3      :   1;           // КМ Роз Варочная панель (KK4.9)
  bool  KM16_Roz4      :   1;           // КМ Роз Холод (KK4.10)
  bool  KM16_Roz5      :   1;           // КМ Роз К16 (KK4.11)
  bool  KM16_Split     :   1;           // КМ Сплит К16 (KK4.12)
  bool  KM16_Vytjahz   :   1;           // КМ Вытяжка К16 (KK4.13)
  bool  KM16_Svet      :   1;           // КМ Свет К16 (KK4.14)
  bool  KM16_Pano      :   1;           // КМ Пано К16 (KK4.15)
  bool  KM16_SvetGr1   :   1;           // КМ СВ Столешница1 К16 (KK4.16)
  bool  KM16_SvetGr2   :   1;           // КМ СВ Столешница2 К16 (KK8.1)
  bool  KM16_SvetGr3   :   1;           // КМ СВ Столешница3 К16 (KK8.2)
  bool  KM18_SvetGr1   :   1;           // КМ Свет улицы 1 (KK8.3)
  bool  KM18_SvetGr2   :   1;           // КМ Свет улицы 2 (KK8.4)
  bool  KM18_SvetGr3   :   1;           // КМ Свет улицы 3 (KK8.5)
  bool  KM18_SvetGr4   :   1;           // КМ Свет улицы 4 (KK8.6)
  bool  KM18_SvetGr5   :   1;           // КМ Свет улицы 5 (KK8.7)
  bool  KM15_Svet      :   1;           // КМ Свет К15 (KK8.8)
  bool  KM15_Bra       :   1;           // КМ Бра К15 (KK8.9)
  bool  KM15_LED       :   1;           // КМ LED К15 (KK8.10)
  bool  KM13_Svet      :   1;           // КМ Свет К13 (KK8.11)
  bool  KM13_Bra       :   1;           // КМ Бра К13 (KK8.12)
  bool  KM13_LED       :   1;           // КМ LED К13 (KK8.13)
  bool  KM13_WtoraTulO :   1;           // KM Штора К13 тюль Откр (KK8.14)
  bool  KM13_WtoraTulC :   1;           // KM Штора К13 тюль Закр (KK8.15)
  bool  KM13_WtoraTenO :   1;           // KM Штора К13 тень Откр (KK8.16)
  bool  KM13_WtoraTenC :   1;           // KM Штора К13 тень Закр (KK9.1)
  bool  KM13_DatDv     :   1;           // КМ Пит Дат Движ К13 (KK9.2)
  bool  KM14_SvetGr1   :   1;           // КМ Свет1 К14 (KK9.3)
  bool  KM14_SvetGr2   :   1;           // КМ Свет2 К14 (KK9.4)
  bool  KM14_SvetTV    :   1;           // КМ ПодТВ К14 (KK9.5)
  bool  KM14_Mirr      :   1;           // КМ Зеркало К14 (KK9.6)
  bool  KM14_Pano      :   1;           // КМ Пано К14 (KK9.7)
  bool  KM14_Roz       :   1;           // КМ Роз К14 (KK9.8)
  bool  KM14_Split     :   1;           // КМ Сплит К14 (KK9.9)
  bool  KM4_Roz1       :   1;           // КМ СтирМаш К4 (KK9.10)
  bool  KM4_Roz2       :   1;           // КМ СушилМаш К4 (KK9.11)
  bool  KM4_Roz3       :   1;           // КМ Роз К4 (KK9.12)
  bool  KM4_Split      :   1;           // КМ Сплит К4 (KK9.13)
  bool  KM4_Vytjahz    :   1;           // КМ Вытяжка К4 (KK9.14)
  bool  KM4_Svet       :   1;           // КМ Свет К4 (KK9.15)
  bool  KM4_Toch1      :   1;           // КМ Точки1 К4 (KK9.16)
  bool  KM14_WtoraTulO :   1;           // KM Штора К14 тюль Откр (KK10.1)
  bool  KM14_WtoraTulC :   1;           // KM Штора К14 тюль Закр (KK10.2)
  bool  KM14_WtoraTenO :   1;           // KM Штора К14 тень Откр (KK10.3)
  bool  KM14_WtoraTenC :   1;           // KM Штора К14 тень Закр (KK10.4)
  bool  KM14_WtoraSZO  :   1;           // KM Штора К14 СЗ Откр (KK10.5)
  bool  KM14_WtoraSZC  :   1;           // KM Штора К14 СЗ Закр (KK10.6)
  bool  KM14_WtoraUVO  :   1;           // KM Штора К14 ЮВ Откр (KK10.7)
  bool  KM14_WtoraUVC  :   1;           // KM Штора К14 ЮВ Закр (KK10.8)
  bool  KM4_Toch2      :   1;           // КМ Точки2 К4 (KK11.1)
  bool  KM4_LED        :   1;           // КМ LED К4 (KK11.2)
  bool  KM4_Wkaf       :   1;           // КМ Шкаф К4 (KK11.3)
  bool  KM4_WtoraTulO  :   1;           // KM Штора К4 тюль Откр (KK11.4)
  bool  KM4_WtoraTulC  :   1;           // KM Штора К4 тюль Закр (KK11.5)
  bool  KM4_WtoraTenO  :   1;           // KM Штора К4 тень Откр (KK11.6)
  bool  KM4_WtoraTenC  :   1;           // KM Штора К4 тень Закр (KK11.7)
  bool  KM10_Wkaf      :   1;           // КМ Шкаф К10 (KK11.8)
  bool  KM_Rezerv1     :   1;           // Резерв 1 (KK11.9)
  bool  KM_Rezerv2     :   1;           // Резерв 2 (KK11.10)
  bool  KM_Rezerv3     :   1;           // Резерв 3 (KK11.11)
  bool  KM_Rezerv4     :   1;           // Резерв 4 (KK11.12)
  bool  KM_Rezerv5     :   1;           // Резерв 5 (KK11.13)
  bool  KM_Rezerv6     :   1;           // Резерв 6 (KK11.14)
  bool  KM_Rezerv7     :   1;           // Резерв 7 (KK11.15)
  bool  KM_Rezerv8     :   1;           // Резерв 8 (KK11.16)  
} ;

struct st_TokSplit{                     // 
  unsigned int Tok2_Split     :   12;   // Ток кондиц К2
  unsigned int Tok5_Split     :   12;   // Ток кондиц К5
  unsigned int Tok9_Split     :   12;   // Ток кондиц К9
  unsigned int Tok10_Split    :   12;   // Ток кондиц К10
  unsigned int Tok16_Split    :   12;   // Ток кондиц К16
  unsigned int Tok16_Vytjahz  :   12;   // Ток вытяжка К16
  unsigned int Tok14_Split    :   12;   // Ток кондиц К14
  unsigned int Tok4_Split     :   12;   // Ток кондиц К4  
};
  
struct  st_MapModBas{                   //
  int   TimeChM               : 16;     // Время Ч*60+М
  byte  TimeSec               : 8;      // Время СЕК
  byte  Week                  : 8;      // День недели
  int   Day                   : 16;     // День в году
  
  byte  IndexRoz              : 8;      // Индекс работы розеток  
  int   ForecastTemp          : 16;     // Температура через 10 часов(прогноз)
  int   WindPower             : 16;     // Ветер (прогноз)
  
  byte  AntDreb               : 8;      // Время дребезга контактов
  byte  TimUderzh             : 8;      // Время формирования сигнала Удержание кнопки
  
  byte  PauseSend             : 8;      // Пауза между посылками ModBas
  byte  TimResSlave           : 8;      // Время ожидания ответа от Slave
  int   mb1TimSend            : 16;     // Время обмена по сети 1
  int   mb2TimSend            : 16;     // Время обмена по сети 2
  int   mb3TimSend            : 16;     // Время обмена по сети 3
  
  byte  ZnPritRzh1            : 8;      // Значение притока воздуха в реж Отпуск
  byte  ZnPritRzh2            : 8;      // Значение притока воздуха в реж  Повседневный
  byte  ZnPritRzh3            : 8;      // Значение притока воздуха в реж Повседневный2
  byte  ZnPritRzh4            : 8;      // Значение притока воздуха в реж Эконом
  byte  ZnPritRzh5            : 8;      // Значение притока воздуха в реж  Праздник
  byte  ZnPritRzh6            : 8;      // Значение притока воздуха в реж Вне дома
  byte  ZnPritRzh7            : 8;      // Значение притока воздуха в реж Дизель 
   
  int   SC1VrONGr1            : 16;     // Время включения Гр1
  int   SC1VrONGr2            : 16;     // Время включения Гр2
  int   SC1VrONGr3            : 16;     // Время включения Гр3
  int   SC1VrONGr4            : 16;     // Время включения Гр4
  int   SC1VrONGr5            : 16;     // Время включения Гр5
  int   SC1VrOFFGr1           : 16;     // Время выключения Гр1
  int   SC1VrOFFGr2           : 16;     // Время выключения Гр2
  int   SC1VrOFFGr3           : 16;     // Время выключения Гр3
  int   SC1VrOFFGr4           : 16;     // Время выключения Гр4
  int   SC1VrOFFGr5           : 16;     // Время выключения Гр5
  int   SC2VrONGr1            : 16;     // Время включения Гр1
  int   SC2VrONGr2            : 16;     // Время включения Гр2
  int   SC2VrONGr3            : 16;     // Время включения Гр3
  int   SC2VrONGr4            : 16;     // Время включения Гр4
  int   SC2VrONGr5            : 16;     // Время включения Гр5
  int   SC2VrOFFGr1           : 16;     // Время выключения Гр1
  int   SC2VrOFFGr2           : 16;     // Время выключения Гр2
  int   SC2VrOFFGr3           : 16;     // Время выключения Гр3
  int   SC2VrOFFGr4           : 16;     // Время выключения Гр4
  int   SC2VrOFFGr5           : 16;     // Время выключения Гр5
  int   SC3VrONGr1            : 16;     // Время включения Гр1
  int   SC3VrONGr2            : 16;     // Время включения Гр2
  int   SC3VrONGr3            : 16;     // Время включения Гр3
  int   SC3VrONGr4            : 16;     // Время включения Гр4
  int   SC3VrONGr5            : 16;     // Время включения Гр5
  int   SC3VrOFFGr1           : 16;     // Время выключения Гр1
  int   SC3VrOFFGr2           : 16;     // Время выключения Гр2
  int   SC3VrOFFGr3           : 16;     // Время выключения Гр3
  int   SC3VrOFFGr4           : 16;     // Время выключения Гр4
  int   SC3VrOFFGr5           : 16;     // Время выключения Гр5  
  byte  RabGrSvet             : 8;      // Рабочая группа по освещенности
  int   ZnOsvUlic             : 16;     // значение освещенности улицы вкл реж ТЕМНО 
  bool  flStartModBas         :1;       // Флаг разрешения обмена по ModBas 
  bool  flSaveMB1             :1;       // флаг внесенного изменения MB1 (необходима запись в EEPROM)
  bool  flSaveMB2             :1;       // флаг внесенного изменения MB2 (необходима запись в EEPROM)
  bool  flSaveMB3             :1;       // флаг внесенного изменения MB3 (необходима запись в EEPROM)
  bool  flSaveMB4             :1;       // флаг внесенного изменения общие данные (необходима запись в EEPROM)
  
  // ========================= MB1 =============================
  st_K5 K5;                             // Помещение №5 - детская спальня левая
  st_K6 K6;                             // Помещение №6-8 - прихожая, гардеробы  
  st_GR GR;                             // Помещение гараж
  // ========================= MB2 =============================
  st_K2 K2;                             // Помещение №2 Спальная левое крыло
  st_K3 K3;                             // Помещение №3 Ванная
  st_K17 K17;                           // Помещение №17 сауна
  st_Outside Outside;                   // Контроллер погоды 
  // ========================= MB3 =============================
  st_K9 K9;                             // Помещение №9 детская правая
  st_K10 K10;                           // Помещение №10
  st_K11 K11;                           // Помещение №11
  st_K12 K12;                           // Помещение №12
  st_K13 K13;                           // Помещение №13
  st_K12 K15;                           // Помещение №15
  st_K16 K16;                           // Помещение №16
  st_K14 K14;                           // Помещение №14
  // =========================    =============================
  
  st_INPUT Input;
  st_OUTPUT Output;
  st_TokSplit TokSplit;
  
  st_RZH_Rab RZH_Rab;                   // Режим работы системы
  st_FlagSV_MB FlagSV_MB;               // Флаг включения обмена с кнтроллером по ModBas
  st_SV_MB  SV_MB;                      // Регистрация обмена с котроллером по ModBas
  st_SvetUlicy SvetUlicy;               // Флаги задействования группы в сценариях
  st_GrUlVOtpusk  GrUlVOtpusk;          // участие группы света улицы в сцене отпуск
};

st_MapModBas MapModBas{                 
       1,  2,  3,  4,  5,  6,  7,  8,  9,  
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
  20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
  30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
  50, 51, 52, 53, 54, 55, 56
};




//MapModBas.mbSC3VrOFFGr5 = 15; 
